@model Identity.Models.TaskItem
@{
    ViewData["Title"] = "Create Task";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        .create-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
            padding: 32px;
            margin: 20px auto;
            max-width: 800px;
        }

        .create-header {
            text-align: center;
            margin-bottom: 32px;
            padding-bottom: 24px;
            border-bottom: 2px solid rgba(102, 126, 234, 0.1);
        }

        .create-icon {
            font-size: 48px;
            color: #667eea;
            margin-bottom: 16px;
        }

        .create-title {
            color: #2c3e50;
            font-weight: 700;
            font-size: 28px;
            margin-bottom: 8px;
        }

        .create-subtitle {
            color: #6c757d;
            font-size: 16px;
            margin: 0;
        }

        .form-section {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 24px;
        }

        .section-title {
            color: #495057;
            font-weight: 600;
            font-size: 18px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-group {
            margin-bottom: 24px;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .form-label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 8px;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-control, .form-select {
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 12px 16px;
            font-size: 15px;
            transition: all 0.3s ease;
            background: white;
        }

            .form-control:focus, .form-select:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
                background: white;
            }

            .form-control::placeholder {
                color: #adb5bd;
                font-style: italic;
            }

        textarea.form-control {
            min-height: 120px;
            resize: vertical;
        }

        .character-count {
            font-size: 12px;
            color: #6c757d;
            text-align: right;
            margin-top: 4px;
        }

        .multi-select-container {
            position: relative;
        }

        .multi-select {
            min-height: 120px;
            padding: 8px;
        }

            .multi-select option {
                padding: 6px 12px;
                margin-bottom: 2px;
                border-radius: 4px;
            }

        .validation-error {
            color: #dc3545;
            font-size: 13px;
            margin-top: 6px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .help-text {
            font-size: 13px;
            color: #6c757d;
            margin-top: 6px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .priority-preview {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            margin-left: 8px;
            min-width: 60px;
            text-align: center;
        }

        .priority-low {
            background-color: #28a745;
            color: white;
        }

        .priority-medium {
            background-color: #ffc107;
            color: #000;
        }

        .priority-high {
            background-color: #fd7e14;
            color: white;
        }

        .priority-critical {
            background-color: #dc3545;
            color: white;
        }

        .status-preview {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            margin-left: 8px;
            min-width: 80px;
            text-align: center;
        }

        .status-todo {
            background-color: #6c757d;
            color: white;
        }

        .status-inprogress {
            background-color: #007bff;
            color: white;
        }

        .status-testing {
            background-color: #17a2b8;
            color: white;
        }

        .status-done {
            background-color: #28a745;
            color: white;
        }

        .action-buttons {
            display: flex;
            gap: 16px;
            justify-content: center;
            margin-top: 32px;
        }

        .btn-create {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            color: white;
            padding: 14px 32px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 16px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 16px rgba(102, 126, 234, 0.3);
            position: relative;
            overflow: hidden;
        }

            .btn-create::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
                transition: left 0.5s;
            }

            .btn-create:hover::before {
                left: 100%;
            }

            .btn-create:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
                color: white;
            }

        .btn-cancel {
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            border: none;
            color: white;
            padding: 14px 32px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 16px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 16px rgba(108, 117, 125, 0.3);
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

            .btn-cancel:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(108, 117, 125, 0.4);
                color: white;
                text-decoration: none;
            }

        .slide-in {
            animation: slideIn 0.5s ease-out;
        }

        @@keyframes slideIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .required-field::after {
            content: ' *';
            color: #dc3545;
        }

        @@media (max-width: 768px) {
            .form-row

        {
            grid-template-columns: 1fr;
        }

        .create-card {
            margin: 10px;
            padding: 24px;
        }

        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="create-card slide-in">
            <div class="create-header">
                <div class="create-icon">
                    <i class="fas fa-plus-circle"></i>
                </div>
                <h2 class="create-title">Create New Task</h2>
                <p class="create-subtitle">Set up a new task to track your work progress</p>
            </div>

            <form asp-action="Create" method="post" id="createForm" novalidate>
                @Html.AntiForgeryToken()

                <div class="form-section">
                    <div class="section-title">
                        <i class="fas fa-info-circle"></i>
                        Task Information
                    </div>

                    <div class="form-group">
                        <label asp-for="Title" class="form-label required-field">
                            <i class="fas fa-tasks"></i>
                            Task Title
                        </label>
                        <input asp-for="Title" class="form-control" placeholder="Enter a clear, descriptive task title" maxlength="200" />
                        <!--<span asp-validation-for="Title" class="validation-error">
                            <i class="fas fa-exclamation-triangle"></i>
                        </span>-->
                        <div class="help-text">
                            <i class="fas fa-info-circle"></i>
                            Use a clear, action-oriented title that describes what needs to be done
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Description" class="form-label">
                            <i class="fas fa-align-left"></i>
                            Description
                        </label>
                        <textarea asp-for="Description" class="form-control"
                                  placeholder="Describe the task requirements, acceptance criteria, and any important details..."
                                  maxlength="1000" id="descriptionField"></textarea>
                        <!--<span asp-validation-for="Description" class="validation-error">
                            <i class="fas fa-exclamation-triangle"></i>
                        </span>-->
                        <div class="character-count">
                            <span id="charCount">0</span> / 1000 characters
                        </div>
                        <div class="help-text">
                            <i class="fas fa-lightbulb"></i>
                            Include acceptance criteria, requirements, and any dependencies
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label asp-for="ProjectId" class="form-label required-field">
                                <i class="fas fa-folder-open"></i>
                                Project
                            </label>
                            <select asp-for="ProjectId" class="form-select" asp-items="@(ViewData["ProjectId"] as IEnumerable<SelectListItem>)" id="projectSelect">
                                <option value="">Select a project</option>
                            </select>
                            <!--<span asp-validation-for="ProjectId" class="validation-error">
                                <i class="fas fa-exclamation-triangle"></i>
                            </span>-->
                        </div>

                        <div class="form-group">
                            <label asp-for="AssignedUserId" class="form-label">
                                <i class="fas fa-user"></i>
                                Assign To
                            </label>
                            <select asp-for="AssignedUserId" class="form-select" asp-items="@(ViewData["AssignedUserId"] as IEnumerable<SelectListItem>)" id="assignedUserSelect">
                                <option value="">Unassigned</option>
                            </select>
                            <!--<span asp-validation-for="AssignedUserId" class="validation-error">
                                <i class="fas fa-exclamation-triangle"></i>
                            </span>-->
                        </div>
                    </div>
                </div>

                <div class="form-section">
                    <div class="section-title">
                        <i class="fas fa-cog"></i>
                        Task Settings
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label asp-for="Priority" class="form-label required-field">
                                <i class="fas fa-flag"></i>
                                Priority
                                <span class="priority-preview" id="priorityPreview">Medium</span>
                            </label>
                            <select asp-for="Priority" class="form-select" asp-items="@(ViewData["Priorities"] as IEnumerable<SelectListItem>)" id="prioritySelect">
                            </select>
                            <!--<span asp-validation-for="Priority" class="validation-error">
                                <i class="fas fa-exclamation-triangle"></i>
                            </span>-->
                        </div>

                        <div class="form-group">
                            <label asp-for="Status" class="form-label required-field">
                                <i class="fas fa-circle-notch"></i>
                                Status
                                <span class="status-preview" id="statusPreview">To Do</span>
                            </label>
                            <select asp-for="Status" class="form-select" asp-items="@(ViewData["Statuses"] as IEnumerable<SelectListItem>)" id="statusSelect">
                            </select>
                            <!--<span asp-validation-for="Status" class="validation-error">
                                <i class="fas fa-exclamation-triangle"></i>
                            </span>-->
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label asp-for="EstimatedHours" class="form-label">
                                <i class="fas fa-clock"></i>
                                Estimated Hours
                            </label>
                            <input asp-for="EstimatedHours" class="form-control" placeholder="0.0" type="number" step="0.25" min="0" max="999" />
                            <!--<span asp-validation-for="EstimatedHours" class="validation-error">
                                <i class="fas fa-exclamation-triangle"></i>
                            </span>-->
                            <div class="help-text">
                                <i class="fas fa-info-circle"></i>
                                Estimate how many hours this task will take
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="SelectedTagIds" class="form-label">
                                <i class="fas fa-tags"></i>
                                Tags
                            </label>
                            <div class="multi-select-container">
                                <select name="SelectedTagIds" class="form-control multi-select" multiple asp-items="@(ViewData["AvailableTags"] as IEnumerable<SelectListItem>)">
                                </select>
                            </div>
                            <div class="help-text">
                                <i class="fas fa-info-circle"></i>
                                Hold Ctrl/Cmd to select multiple tags for better organization
                            </div>
                        </div>
                    </div>
                </div>

                <div class="action-buttons">
                    <button type="submit" class="btn-create" id="createBtn">
                        <i class="fas fa-plus me-2"></i>
                        Create Task
                    </button>
                    <a asp-action="Index" class="btn-cancel">
                        <i class="fas fa-times me-2"></i>
                        Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('createForm');
            const createBtn = document.getElementById('createBtn');
            const descriptionField = document.getElementById('descriptionField');
            const charCount = document.getElementById('charCount');
            const prioritySelect = document.getElementById('prioritySelect');
            const statusSelect = document.getElementById('statusSelect');
            const priorityPreview = document.getElementById('priorityPreview');
            const statusPreview = document.getElementById('statusPreview');

            // Character counter for description
            function updateCharCount() {
                const count = descriptionField.value.length;
                charCount.textContent = count;

                if (count > 900) {
                    charCount.style.color = '#dc3545';
                } else if (count > 800) {
                    charCount.style.color = '#ffc107';
                } else {
                    charCount.style.color = '#6c757d';
                }
            }

            descriptionField.addEventListener('input', updateCharCount);
            updateCharCount(); // Initial count

            // Priority preview update
            function updatePriorityPreview() {
                const value = prioritySelect.value.toLowerCase();
                const text = prioritySelect.options[prioritySelect.selectedIndex].text;

                priorityPreview.textContent = text;
                priorityPreview.className = `priority-preview priority-${value}`;
            }

            // Status preview update
            function updateStatusPreview() {
                const value = statusSelect.value.toLowerCase();
                const text = statusSelect.options[statusSelect.selectedIndex].text;

                statusPreview.textContent = text;
                statusPreview.className = `status-preview status-${value.replace(' ', '')}`;
            }

            prioritySelect.addEventListener('change', updatePriorityPreview);
            statusSelect.addEventListener('change', updateStatusPreview);

            // Initialize previews
            updatePriorityPreview();
            updateStatusPreview();

            // Form validation
            form.addEventListener('submit', function(e) {
                // Add loading state
                const originalText = createBtn.innerHTML;
                createBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating...';
                createBtn.disabled = true;

                // Basic validation
                let isValid = true;
                const titleField = document.querySelector('[name="Title"]');
                const projectField = document.querySelector('[name="ProjectId"]');

                if (!titleField.value.trim()) {
                    e.preventDefault();
                    alert('Task title is required');
                    isValid = false;
                    titleField.focus();
                }

                if (!projectField.value) {
                    e.preventDefault();
                    alert('Please select a project');
                    isValid = false;
                    if (isValid) projectField.focus();
                }

                if (!isValid) {
                    createBtn.innerHTML = originalText;
                    createBtn.disabled = false;
                    return;
                }

                // If validation passes, form will submit normally
                // Loading state will remain until page redirect
            });

            // Add entrance animation
            const card = document.querySelector('.create-card');
            card.style.transform = 'translateY(20px)';
            card.style.opacity = '0';

            setTimeout(() => {
                card.style.transition = 'all 0.5s ease-out';
                card.style.transform = 'translateY(0)';
                card.style.opacity = '1';
            }, 100);

            // Auto-resize textarea
            descriptionField.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 300) + 'px';
            });

            // Enhanced select styling
            const selects = document.querySelectorAll('.form-select');
            selects.forEach(select => {
                select.addEventListener('focus', function() {
                    this.parentElement.style.transform = 'translateY(-1px)';
                    this.parentElement.style.transition = 'transform 0.2s ease';
                });

                select.addEventListener('blur', function() {
                    this.parentElement.style.transform = 'translateY(0)';
                });
            });
        });
    </script>
</body>
</html>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}