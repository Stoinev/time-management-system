@using Identity.Models
@model List<TaskItem>

@{
    ViewData["Title"] = "Manage Tasks";
    // Projects for the Project filter submenu
    var projects = ViewData["UserProjects"] as List<Project>
                   ?? new List<Project>();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <style>
        .modern-filter {
            position: relative;
            display: inline-block;
        }

        .filter-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }

            .filter-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);
                color: white;
            }

        .filter-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            z-index: 1000;
            min-width: 180px;
            border: 1px solid rgba(0, 0, 0, 0.08);
        }

        .modern-filter:hover .filter-dropdown {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .filter-category {
            position: relative;
            padding: 12px 16px;
            cursor: pointer;
            transition: all 0.2s ease;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            display: flex;
            align-items: center;
            justify-content: space-between;
            color: #495057;
            font-weight: 500;
        }

            .filter-category:hover {
                background: linear-gradient(135deg, #f8f9ff 0%, #e3e8ff 100%);
                color: #667eea;
                padding-left: 20px;
            }

            .filter-category:first-child {
                border-radius: 12px 12px 0 0;
            }

            .filter-category:last-child {
                border-radius: 0 0 12px 12px;
                border-bottom: none;
            }

        .filter-subcategory {
            position: absolute;
            left: 100%;
            top: 0;
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
            opacity: 0;
            visibility: hidden;
            transform: translateX(-10px);
            transition: all 0.3s ease;
            min-width: 160px;
            border: 1px solid rgba(0, 0, 0, 0.08);
            z-index: 1001;
        }

        .filter-category:hover .filter-subcategory {
            opacity: 1;
            visibility: visible;
            transform: translateX(0);
        }

        .filter-option {
            padding: 10px 16px;
            cursor: pointer;
            transition: all 0.2s ease;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            color: #495057;
            font-size: 14px;
        }

            .filter-option:hover {
                background: linear-gradient(135deg, #f0f8ff 0%, #e6f3ff 100%);
                color: #0066cc;
                padding-left: 20px;
            }

            .filter-option:first-child {
                border-radius: 12px 12px 0 0;
            }

            .filter-option:last-child {
                border-radius: 0 0 12px 12px;
                border-bottom: none;
            }

            .filter-option.single {
                border-radius: 12px;
                border-bottom: none;
            }

        .priority-low {
            border-left: 4px solid #28a745;
        }

        .priority-medium {
            border-left: 4px solid #ffc107;
        }

        .priority-high {
            border-left: 4px solid #fd7e14;
        }

        .priority-highletter {
            background-color: #fd7e14;
        }

        .priority-critical {
            border-left: 4px solid #dc3545;
        }

        .status-todo {
            border-left: 4px solid #6c757d;
        }

        .status-inprogress {
            border-left: 4px solid #007bff;
        }

        .status-testing {
            border-left: 4px solid #ffc107;
        }

        .status-done {
            border-left: 4px solid #28a745;
        }

        .search-container {
            position: relative;
            flex: 1;
            max-width: 400px;
        }

        .search-input {
            border-radius: 12px;
            border: 2px solid #e9ecef;
            padding: 10px 40px 10px 16px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

            .search-input:focus {
                border-color: #667eea;
                box-shadow: 0 4px 16px rgba(102, 126, 234, 0.2);
                outline: none;
            }

        .search-icon {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }

        .active-filters {
            display: flex;
            gap: 8px;
            margin-top: 12px;
            flex-wrap: wrap;
        }

        .filter-tag {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 6px;
            animation: slideIn 0.3s ease;
        }

            .filter-tag .remove-filter {
                cursor: pointer;
                font-size: 14px;
                opacity: 0.8;
                transition: opacity 0.2s ease;
            }

                .filter-tag .remove-filter:hover {
                    opacity: 1;
                }

        @@keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .table-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-top: 20px;
        }

        .table {
            margin-bottom: 0;
        }

            .table thead th {
                background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                border: none;
                color: #495057;
                font-weight: 600;
                padding: 16px;
            }

            .table tbody tr {
                transition: all 0.2s ease;
            }

                .table tbody tr:hover {
                    background: linear-gradient(135deg, #f8f9ff 0%, #e3e8ff 100%);
                    transform: translateX(4px);
                }

            .table tbody td {
                padding: 16px;
                vertical-align: middle;
                border-color: rgba(0, 0, 0, 0.05);
            }

        .btn-action {
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

            .btn-action:hover {
                transform: translateY(-1px);
            }

        .no-results {
            text-align: center;
            padding: 40px 20px;
            color: #6c757d;
        }

            .no-results i {
                font-size: 48px;
                margin-bottom: 16px;
                opacity: 0.5;
            }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2 class="fw-bold">@ViewData["Title"]</h2>
            <div class="d-flex gap-2">
                <a class="btn btn-primary" asp-action="Create" style="border-radius: 8px; padding: 8px 16px;">
                    Create Task
                </a>
                <button class="btn btn-secondary" style="border-radius: 8px; padding: 8px 16px;">
                    Customize
                </button>
            </div>
        </div>

        <div class="d-flex align-items-center gap-3 mb-3">
            <div class="search-container">
                <input type="text" class="form-control search-input" id="searchInput"
                       placeholder="Search tasks..." aria-label="Search">
                <i class="fas fa-search search-icon"></i>
            </div>

            <div class="modern-filter">
                <button class="btn filter-btn">
                    <i class="fas fa-filter me-2"></i>Filter
                </button>
                <div class="filter-dropdown">
                    <!-- Project Category -->
                    <div class="filter-category" data-category="project">
                        <span>Project</span>
                        <i class="fas fa-chevron-right"></i>
                        <div class="filter-subcategory">
                            <div class="filter-option" data-filter="project" data-value="">
                                All Projects
                            </div>
                            @foreach (var pr in (List<Project>)ViewData["Projects"])
                            {
                                <div class="filter-option"
                                     data-filter="project"
                                     data-value="@pr.Name">
                                    @pr.Name
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Priority Category -->
                    <div class="filter-category" data-category="priority">
                        <span>Priority</span>
                        <i class="fas fa-chevron-right"></i>
                        <div class="filter-subcategory">
                            <div class="filter-option" data-filter="priority" data-value="">
                                All Priorities
                            </div>
                            <div class="filter-option priority-low" data-filter="priority" data-value="Low">Low</div>
                            <div class="filter-option priority-medium" data-filter="priority" data-value="Medium">Medium</div>
                            <div class="filter-option priority-high" data-filter="priority" data-value="High">High</div>
                            <div class="filter-option priority-critical" data-filter="priority" data-value="Critical">Critical</div>
                        </div>
                    </div>

                    <!-- Status Category -->
                    <div class="filter-category" data-category="status">
                        <span>Status</span>
                        <i class="fas fa-chevron-right"></i>
                        <div class="filter-subcategory">
                            <div class="filter-option" data-filter="status" data-value="">
                                All Status
                            </div>
                            <div class="filter-option status-todo" data-filter="status" data-value="ToDo">To Do</div>
                            <div class="filter-option status-inprogress" data-filter="status" data-value="InProgress">In Progress</div>
                            <div class="filter-option status-testing" data-filter="status" data-value="Testing">Testing</div>
                            <div class="filter-option status-done" data-filter="status" data-value="Done">Done</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="active-filters" id="activeFilters"></div>

        <div class="table-container">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Title</th>
                        <th>Project</th>
                        <th>Assigned To</th>
                        <th>Priority</th>
                        <th>Status</th>
                        <th>Created Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="tasksTableBody">
                    @foreach (var task in Model)
                    {
                        <tr data-project="@task.Project?.Name"
                            data-priority="@task.Priority"
                            data-status="@task.Status">
                            <td>@task.Id</td>
                            <td>@task.Title</td>
                            <td>@task.Project?.Name</td>
                            <td>@(task.AssignedUser?.UserName ?? "Unassigned")</td>
                            <td>
                                <span class="badge
                                        @(task.Priority == TaskPriority.Low ? "bg-success" : task.Priority == TaskPriority.Medium ? "bg-warning" : task.Priority == TaskPriority.High ? "priority-highletter" : "bg-danger")">
                                    @task.Priority
                                </span>
                            </td>
                                <td>
                                    <span class="badge @(task.Status == Identity.Models.TaskStatus.ToDo ? "bg-secondary" : task.Status == Identity.Models.TaskStatus.InProgress ? "bg-primary" : task.Status == Identity.Models.TaskStatus.Testing ? "bg-warning" : "bg-success")">
                                @task.Status
                            </span>
                        </td>
                        <td>@task.CreatedDate.ToString("yyyy-MM-dd")</td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-outline-primary btn-action me-1">Edit</a>
                            <a asp-action="Delete" asp-route-id="@task.Id" class="btn btn-sm btn-outline-danger btn-action me-1">Delete</a>
                            <a asp-action="Details" asp-route-id="@task.Id" class="btn btn-sm btn-outline-info btn-action">Details</a>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
            <div class="no-results" id="noResults" style="display:none;">
                <i class="fas fa-search"></i>
                <h5>No tasks found</h5>
                <p>Try adjusting your search or filters</p>
            </div>
        </div>
    </div>

    <script>
        class ModernTaskFilter {
            constructor() {
                this.activeFilters = {
                    project: '',
                    priority: '',
                    status: '',
                    search: ''
                };
                this.allRows = [];
                this.init();
            }

            init() {
                // Store all table rows
                this.allRows = Array.from(document.querySelectorAll('#tasksTableBody tr'));

                // Setup event listeners
                this.setupFilterListeners();
                this.setupSearchListener();
            }

            setupFilterListeners() {
                document.querySelectorAll('.filter-option').forEach(option => {
                    option.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();

                        const filterType = e.target.dataset.filter;
                        const filterValue = e.target.dataset.value;

                        this.activeFilters[filterType] = filterValue;
                        this.updateActiveFiltersDisplay();
                        this.applyFilters();

                        // Hide filter dropdown after selection
                        this.hideFilterDropdown();
                    });
                });
            }

            setupSearchListener() {
                const searchInput = document.getElementById('searchInput');
                searchInput.addEventListener('input', (e) => {
                    this.activeFilters.search = e.target.value.toLowerCase();
                    this.applyFilters();
                });
            }

            hideFilterDropdown() {
                // Add a small delay to allow for smooth hover transitions
                setTimeout(() => {
                    document.querySelector('.modern-filter').style.pointerEvents = 'none';
                    setTimeout(() => {
                        document.querySelector('.modern-filter').style.pointerEvents = 'auto';
                    }, 100);
                }, 100);
            }

            updateActiveFiltersDisplay() {
                const container = document.getElementById('activeFilters');
                container.innerHTML = '';

                Object.entries(this.activeFilters).forEach(([type, value]) => {
                    if (value && type !== 'search') {
                        const tag = document.createElement('div');
                        tag.className = 'filter-tag';
                        tag.innerHTML = `
                            <span>${type}: ${value}</span>
                            <span class="remove-filter" data-filter="${type}">×</span>
                        `;
                        container.appendChild(tag);

                        // Add remove functionality
                        tag.querySelector('.remove-filter').addEventListener('click', () => {
                            this.activeFilters[type] = '';
                            this.updateActiveFiltersDisplay();
                            this.applyFilters();
                        });
                    }
                });
            }

            applyFilters() {
                let visibleCount = 0;

                this.allRows.forEach(row => {
                    const projectData = row.dataset.project || '';
                    const priorityData = row.dataset.priority || '';
                    const statusData = row.dataset.status || '';
                    const textContent = row.textContent.toLowerCase();

                    const matchesProject = !this.activeFilters.project || projectData === this.activeFilters.project;
                    const matchesPriority = !this.activeFilters.priority || priorityData === this.activeFilters.priority;
                    const matchesStatus = !this.activeFilters.status || statusData === this.activeFilters.status;
                    const matchesSearch = !this.activeFilters.search || textContent.includes(this.activeFilters.search);

                    const shouldShow = matchesProject && matchesPriority && matchesStatus && matchesSearch;

                    if (shouldShow) {
                        row.style.display = '';
                        visibleCount++;
                    } else {
                        row.style.display = 'none';
                    }
                });

                // Show/hide no results message
                const noResults = document.getElementById('noResults');
                if (visibleCount === 0) {
                    noResults.style.display = 'block';
                } else {
                    noResults.style.display = 'none';
                }
            }
        }

        // Initialize the filter system when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            new ModernTaskFilter();
        });
    </script>
</body>
</html>
